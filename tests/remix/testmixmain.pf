module testmixmain
  use pfUnit
  use mixmain
  use mixapp
  use voltapp
  use gamapp

  implicit none

  character(len=strLen) :: kaijuHome

contains

  @before
  subroutine firstSerial()
  end subroutine firstSerial

  @after
  subroutine lastSerial()
  end subroutine lastSerial

  @test
  subroutine testZeroInput()
    ! testing that an input of all zeroes gets output of all zeroes
    type(mixApp_T) :: remixApp
    type(gamApp_T) :: gameraApp

    character(len=strLen) :: caseInput = 'cmiD.xml'

    call initGamera(gameraApp, caseInput)

    call initializeRemixFromGamera(remixApp, gameraApp, caseInput)

    ! field aligned current in remixApp%ion(h)%St%Vars(:,:,FAC)
    remixApp%ion(NORTH)%St%Vars(:,:,FAC) = 0
    remixApp%ion(SOUTH)%St%Vars(:,:,FAC) = 0

    call run_mix(remixApp%ion, remixApp%tilt, remixApp%conductance)

    ! potential in remixApp%ion(h)%St%Vars(:,:,POT)
    @assertLessThanOrEqual(sum(abs(remixApp%ion(NORTH)%St%Vars(:,:,POT))), 1e-8_rp, 'Non-zero remix output in North hemisphere')
    @assertLessThanOrEqual(sum(abs(remixApp%ion(SOUTH)%St%Vars(:,:,POT))), 1e-8_rp, 'Non-zero remix output in South hemisphere')

  end subroutine testZeroInput

  @test
  subroutine testConstantSolution()
    ! testing that an input of all zeroes gets output of all zeroes
    type(mixApp_T) :: remixApp
    type(gamApp_T) :: gameraApp

    real(rp) :: testValue = 240.19
    character(len=strLen) :: caseInput = 'cmiD.xml'

    call initGamera(gameraApp, caseInput)

    call initializeRemixFromGamera(remixApp, gameraApp, caseInput)

    ! field aligned current in remixApp%ion(h)%St%Vars(:,:,FAC)
    remixApp%ion(NORTH)%St%Vars(:,:,FAC) = 0
    remixApp%ion(SOUTH)%St%Vars(:,:,FAC) = 0

    ! modify low lat boundary condition for test
    remixApp%ion(NORTH)%P%llbc_value = testValue
    remixApp%ion(SOUTH)%P%llbc_value = testValue

    call run_mix(remixApp%ion, remixApp%tilt, remixApp%conductance)

    ! potential in remixApp%ion(h)%St%Vars(:,:,POT)
    @assertLessThanOrEqual(sum(abs(remixApp%ion(NORTH)%St%Vars(:,:,POT) - testValue)), 1e-8_rp, 'Remix output in North hemisphere not specified value')
    @assertLessThanOrEqual(sum(abs(remixApp%ion(SOUTH)%St%Vars(:,:,POT) - testValue)), 1e-8_rp, 'Remix output in South hemisphere not specified value')

  end subroutine testConstantSolution

  @test
  subroutine testAzimuthallyDependentFAC()
    ! testing that an input of all zeroes gets output of all zeroes
    type(mixApp_T) :: remixApp
    type(gamApp_T) :: gameraApp

    character(len=strLen) :: caseInput = 'cmiD.xml'

    call initGamera(gameraApp, caseInput)

    call initializeRemixFromGamera(remixApp, gameraApp, caseInput)

    ! field aligned current in remixApp%ion(h)%St%Vars(:,:,FAC)
    remixApp%ion(NORTH)%St%Vars(:,:,FAC) = 0
    remixApp%ion(SOUTH)%St%Vars(:,:,FAC) = 0

    call run_mix(remixApp%ion, remixApp%tilt, remixApp%conductance)

    ! potential in remixApp%ion(h)%St%Vars(:,:,POT)

  end subroutine testAzimuthallyDependentFAC

end module testmixmain
