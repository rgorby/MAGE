module testHelpers
  use pFUnit
  use gamapp_mpi
  use voltapp_mpi
  use gam2voltcomm_mpi
  use uservoltic
  use ioH5

  implicit none

  logical :: isGamera = .false.
  type(gamAppMpi_T), allocatable :: gamAppMpi
  type(voltAppMpi_T), allocatable :: voltAppMpi
  type(gam2voltCommMpi_T), allocatable :: g2vCommMpi

contains

  @before
  subroutine emptySetup(this)
      class (MpiTestMethod), intent(inout) :: this
      ! does nothing, fighting with pfunit
  end subroutine

  subroutine manualSetup(this, caseFile)
      class (MpiTestMethod), intent(inout) :: this
      character(len=*), intent(in) :: caseFile

      integer :: ierror, gamComm = MPI_COMM_NULL, voltComm = MPI_COMM_NULL

      call setMpiReal()

      ! hard-coded for 4 gamera ranks for these tests right now
      if(this%getProcessRank() < 4) then
          isGamera = .true.
          allocate(gamAppMpi)
          allocate(g2vCommMpi)

          ! make gamera-only mpi communicator
          call MPI_Comm_Split(this%getMpiCommunicator(), 0, this%getProcessRank(), gamComm, ierror)

          call initGamera_mpi(gamAppMpi, initUser, gamComm, trim(caseFile), .false.)
          call initGam2Volt(g2vCommMpi, gamAppMpi, this%getMpiCommunicator(), trim(caseFile))
      else
          isGamera = .false.
          allocate(voltAppMpi)

          ! make gamera-only mpi communicator
          call MPI_Comm_Split(this%getMpiCommunicator(), 1, this%getProcessRank(), voltComm, ierror)

          call initVoltron_mpi(voltAppMpi, initUser, voltComm, this%getMpiCommunicator(), trim(caseFile))
      endif

  end subroutine manualSetup

  @after
  subroutine teardown(this)
      class (MpiTestMethod), intent(inout) :: this

      if(allocated(voltAppMpi)) then
          call endVoltronWaits(voltAppMpi)
          deallocate(voltAppMpi)
      endif
      if(allocated(g2vCommMpi)) then
          call endGam2VoltWaits(g2vCommMpi, gamAppMpi)
          deallocate(g2vCommMpi)
      endif
      if(allocated(gamAppMpi)) deallocate(gamAppMpi)

  end subroutine teardown

  subroutine runApplication()

      if(isGamera) then
          do while (g2vCommMpi%time < g2vCommMpi%tFin)
            call stepGamera_mpi(gamAppMpi)
            call localStepVoltronTime(g2vCommMpi, gamAppMpi)
            if( (g2vCommMpi%time >= g2vCommMpi%DeepT .and. g2vCommMpi%doDeep) .or. &
                (g2vCommMpi%time >= g2vCommMpi%ShallowT) .or. &
                (g2vCommMpi%time >= g2vCommMpi%tFin)) then
                call performStepVoltron(g2vCommMpi,gamAppMpi)
                if(g2vCommMpi%doDeep .and. g2vCommMpi%time >= g2vCommMpi%DeepT .and. g2vCommMpi%time >= g2vCommMpi%ShallowT) then
                    call performShallowAndDeepUpdate(g2vCommMpi, gamAppMpi)
                elseif ( g2vCommMpi%time >= g2vCommMpi%DeepT .and. g2vCommMpi%doDeep ) then
                    call performDeepUpdate(g2vCommMpi, gamAppMpi)
                elseif (g2vCommMpi%time >= g2vCommMpi%ShallowT) then
                    call performShallowUpdate(g2vCommMpi, gamAppMpi)
                endif
            endif
          end do
      else
          do while (voltAppMpi%time < voltAppMpi%tFin)
            if(voltAppMpi%amHelper) then
                call helpVoltron(voltAppMpi)
            else
                if(gameraStepReady(voltAppMpi)) then
                    call stepVoltron_mpi(voltAppMpi)
                    write (*,'(a,f8.3)') '    Time = ',voltAppMpi%time
                    if(voltAppMpi%doDeep .and. voltAppMpi%time >= voltAppMpi%DeepT .and. voltAppMpi%time >= voltAppMpi%ShallowT) then ! both
                        call shallowAndDeepUpdate_Mpi(voltAppMpi, voltAppMpi%time)
                    elseif (voltAppMpi%time >= voltAppMpi%DeepT .and. voltAppMpi%doDeep ) then
                        call DeepUpdate_mpi(voltAppMpi, voltAppMpi%time)
                    elseif (voltAppMpi%time >= voltAppMpi%ShallowT) then
                        call ShallowUpdate_mpi(voltAppMpi, voltAppMpi%time)
                    endif
                elseif(deepInProgress(voltAppMpi)) then
                    call doDeepBlock(voltAppMpi)
                else
                    call waitForGameraStep(voltAppMpi)
                endif
            endif
        end do
      endif

  end subroutine runApplication

  @test(npes=[8])
  subroutine testHelpTimestepping(this)
      class (MpiTestMethod), intent(inout) :: this

      call manualSetup(this, 'testHelpersStep_4.xml')
      if(isGamera) then
          call runApplication()
      else
          call runApplication()
      endif

  end subroutine

  @test(npes=[8])
  subroutine testHelpSquish(this)
      class (MpiTestMethod), intent(inout) :: this

      call manualSetup(this, 'testHelpersSquish_4.xml')

      if(isGamera) then
          call runApplication()
      else
          call runApplication()
      endif

  end subroutine

end module testHelpers

