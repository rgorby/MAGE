module testVMpi
  use pFUnit
  use gamapp_mpi
  use voltapp_mpi
  use gam2voltcomm_mpi
  use uservoltic

  implicit none

  logical :: isGamera = .false.
  type(gamAppMpi_T), allocatable :: gamAppMpi
  type(voltAppMpi_T), allocatable :: voltAppMpi
  type(gam2voltCommMpi_T), allocatable :: g2vCommMpi

contains

  @before
  subroutine setup(this)
      class (MpiTestMethod), intent(inout) :: this
      character(len=strLen) :: caseFile

      integer :: ierror, gamComm = MPI_COMM_NULL

      call setMpiReal()

      write(caseFile,'(A,I0,A)') 'cmiD_', this%getNumProcesses()-1, '.xml'


      if(this%getProcessRank() < (this%getNumProcesses()-1)) then
          isGamera = .true.
          allocate(gamAppMpi)
          allocate(g2vCommMpi)

          ! make gamera-only mpi communicator
          call MPI_Comm_Split(this%getMpiCommunicator(), 0, this%getProcessRank(), gamComm, ierror)

          call initGamera_mpi(gamAppMpi, initUser, gamComm, caseFile, .false.)
          call initGam2Volt(g2vCommMpi, gamAppMpi, this%getMpiCommunicator())
      else
          isGamera = .false.
          allocate(voltAppMpi)

          ! make gamera-only mpi communicator
          call MPI_Comm_Split(this%getMpiCommunicator(), MPI_UNDEFINED, this%getProcessRank(), gamComm, ierror)

          call initVoltron_mpi(voltAppMpi, initUser, this%getMpiCommunicator(), caseFile)
      endif

  end subroutine setup

  @after
  subroutine teardown(this)
      class (MpiTestMethod), intent(inout) :: this

      if(allocated(gamAppMpi)) deallocate(gamAppMpi)
      if(allocated(voltAppMpi)) deallocate(voltAppMpi)
      if(allocated(g2vCommMpi)) deallocate(g2vCommMpi)

  end subroutine teardown

  @test(npes=[2,5,17])
  subroutine testStepUpdate(this)
      class (MpiTestMethod), intent(inout) :: this

      character(len=strLen) :: checkMessage

      if(isGamera) then
          ! setting fixed values to gamera to ensure updates occur
          gamAppMpi%Model%t = 1.23
          gamAppMpi%Model%ts = 178
          g2vCommMpi%time = 0
          g2vCommMpi%MJD = 0
          g2vCommMpi%ts = 0

          call performStepVoltron(g2vCommMpi,gamAppMpi)

          write (checkMessage,'(A,I0)') 'voltron time wrong on gamera rank ',this%getProcessRank()
          @assertEqual(1.23*gamAppMpi%Model%Units%gT0, g2vCommMpi%time, trim(checkMessage))
          write (checkMessage,'(A,I0)') 'MJD wrong on gamera rank ',this%getProcessRank()
          @assertEqual(gamAppMpi%Model%MJD0 + g2vCommMpi%time/(60.0*60.0*24.0), g2vCommMpi%MJD, trim(checkMessage))
          write (checkMessage,'(A,I0)') 'voltron ts wrong on gamera rank ',this%getProcessRank()
          @assertEqual(178, g2vCommMpi%ts, trim(checkMessage))
      else
          ! setting fixed values to voltron to ensure updates occur
          voltAppMpi%gAppLocal%Model%t = 0
          voltAppMpi%gAppLocal%Model%ts = 0
          voltAppMpi%time = 0
          voltAppMpi%MJD = 0
          voltAppMpi%ts = 0

          call stepVoltron_mpi(voltAppMpi)

          @assertEqual(1.23, voltAppMpi%gAppLocal%Model%t, 'gamera time value wrong on voltron')
          @assertEqual(178, voltAppMpi%gAppLocal%Model%ts, 'gamera ts value wrong on voltron')
          @assertEqual(1.23*voltAppMpi%gAppLocal%Model%Units%gT0, voltAppMpi%time, 'voltron time value wrong on voltron')
          @assertEqual(voltAppMpi%gAppLocal%Model%MJD0 + voltAppMpi%time/(60.0*60.0*24.0), voltAppMpi%MJD, 'MJD value wrong on voltron')
          @assertEqual(178, voltAppMpi%ts, 'voltron ts value wrong on voltron')
      endif

  end subroutine testStepUpdate

  !@test(npes=[2,5,17])
  subroutine testShallowUpdate(this)
      class (MpiTestMethod), intent(inout) :: this

      SELECT CASE(this%getNumProcesses())
          CASE (2)
          CASE (5)
          CASE (17)
          CASE DEFAULT
              @assertEqual(0, 1, 'Unexpected number of MPI processes')
      END SELECT

  end subroutine testShallowUpdate

  !@test(npes=[2,5,17])
  subroutine testDeepUpdate(this)
      class (MpiTestMethod), intent(inout) :: this

      SELECT CASE(this%getNumProcesses())
          CASE (2)
          CASE (5)
          CASE (17)
          CASE DEFAULT
              @assertEqual(0, 1, 'Unexpected number of MPI processes')
      END SELECT

  end subroutine testDeepUpdate


end module testVMpi

