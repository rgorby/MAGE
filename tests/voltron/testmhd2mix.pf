module testmhd2mix
  use pfUnit
  use voltapp
  use gamapp

  implicit none

contains

  @before
  subroutine firstSerial()
  end subroutine firstSerial

  @after
  subroutine lastSerial()
  end subroutine lastSerial

  !@test
  subroutine dipoleTest()
    ! testing that a dipole field from gamera results in 0 FAC in remix
    type(voltApp_T) :: voltronApp
    type(gamApp_T) :: gameraApp

    procedure(VectorField_T), pointer :: Axyz
    character(len=strLen) :: caseInput = 'cmiD.xml'
    real(rp) testValue

    call initGamera(gameraApp, caseInput)

    call initVoltron(voltronApp, gameraApp)

    ! create a dipole field in Gamera. This code is copied from prob.F90
    Axyz => VectorPot_Loop2D
    call VectorPot2Flux(gameraApp%Model,gameraApp%Grid,gameraApp%State,Axyz)

    call convertGameraToRemix(gameraApp, voltronApp%remixApp)

    call mhd2mix(voltronApp%remixApp) ! this calls run_remix inside, should be split into its own function call

    ! verify that remix input FAC is all zeroes
    testValue = sum(abs(voltronApp%remixApp%ion(NORTH)%St%Vars(:,:,FAC))) + sum(abs(voltronApp%remixApp%ion(SOUTH)%St%Vars(:,:,FAC)))

    @assertLessThanOrEqual(testValue, 1e-8_rp, 'Remix did not get all 0 FAC from an input dipole field')

    !modified to hard-code xo and y0 to 0.0
    contains
        subroutine VectorPot_Loop2D(x,y,z,Ax,Ay,Az)

            real(rp), intent(in) :: x,y,z
            real(rp), intent(out) :: Ax,Ay,Az

            real(rp) :: A0_FL = 1.0e-3_rp
            real(rp) :: R0_FL = 0.3_rp
            real(rp) :: r

            Ax = 0.0
            Ay = 0.0
            r = sqrt( (x)**2.0 + (y)**2.0 ) ! + z**2.0)
            Az = max( 0.0 , A0_FL*(R0_FL-r) )

        end subroutine VectorPot_Loop2D

  end subroutine dipoleTest

end module testmhd2mix

