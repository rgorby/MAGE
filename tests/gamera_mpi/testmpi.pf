module testMpi
  use pFUnit
  use gamapp_mpi
  use usergamic

  implicit none

  type(gamAppMpi_T) :: gamAppMpi

contains

  @before
  subroutine setup(this)
      class (MpiTestMethod), intent(inout) :: this
      character(len=strLen) :: caseFile

      call setMpiReal()

      write(caseFile,'(A,I0,A)') 'blast3d_', this%getNumProcesses(), '.xml'

      call initGamera_mpi(gamAppMpi, initUser, this%getMpiCommunicator(), caseFile, .false.)
  end subroutine setup

  @after
  subroutine teardown(this)
      class (MpiTestMethod), intent(inout) :: this
  end subroutine teardown

  @test(npes=[1,3,9,27])
  subroutine testTiling(this)
      class (MpiTestMethod), intent(inout) :: this

      SELECT CASE(this%getNumProcesses())
          CASE (1)
              @assertFalse(gamAppMpi%Grid%isTiled, '1 processor isTiled wrong')
              @assertEqual(gamAppMpi%Grid%NumRi, 1, '1 processor NumRi wrong')
              @assertEqual(gamAppMpi%Grid%NumRi, 1, '1 processor NumRj wrong')
              @assertEqual(gamAppMpi%Grid%NumRi, 1, '1 processor NumRk wrong')
          CASE (3)
          CASE (9)
          CASE (27)
          CASE DEFAULT
              @assertEqual(0, 1, 'Unexpected number of MPI processes')
      END SELECT
  end subroutine testTiling

end module testMpi

