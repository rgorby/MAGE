#!/bin/bash
#PBS -N loop2d
#PBS -j oe
#PBS -q normal
#PBS -l walltime=00:05:00
#PBS -l select=1:ncpus=28:ompthreads=28:model=bro

# This script was designed to run on the pleiades (or electra) supercomputer
# at NASA Ames. Modify this job script as needed for other HPC systems, such
# as cheyenne.ucar.edu. Typically, the only changes needed are the queue name,
# and removal of the "model" specification. You may also need to add an
# account using the -A option, especially on cheyenne.

# Explanation of #PBS lines:

# -N loop2d -> The PBS job is named "loop2d". This name will appear in the
# "qstat" output for this job.

# -j oe -> Combine job script stdout and stderr into stdout. This combined
# output will be saved in the file loop2d.oJOB_NUM, where JOB_NUM is the PBS
# job number assigned when the job is submitted. Note that the output from the
# kaiju software itself is captured in a separate file (see below).

# -q normal -> Submit the job to the PBS queue called "normal".

# -l walltime=00:05:00 -> Request 5 minutes of compute time on the requested
# compute node(s). On pleiades, this job typically takes a minute or less to
# run to completion, but request a longer period to account for variable
# system conditions.

# For the components of the -l resource request line:

# select=1 -> Request 1 compute node. It will run 1 copy of gamera.x.  Note
# that this is the *serial* version of gamera - it uses only OMP threads, and
# does not use MPI ranks.

# ncpus=28 -> Each compute node must have at least 28 cores.

# ompthreads=28 -> Each compute node will run 28 OMP threads for the single
# copy of gamera.x on that node. Note that this will also force the
# OMP_THREADS environment variable to be set to 28.

# model=bro -> Each compute node must contain Broadwell chips. Specifying
# "model" is a HECC-specific PBS requirement. The node(s) may be on pleiades
# OR electra (not both), using whichever system is available first. The
# Broadwell chips were chosen because they have the highest core count per
# socket.


# This PBS job script will run the serial version of gamera (gamera.x) on the
# loop2d quickstart case.

# Example usage
# qsub -v loop2d.pbs

echo "Job $PBS_JOBID started at `date` on `hostname`."

# Specify the ID string for the run.
# This can be set to any desired string. PBS_JOBNAME is used here as an
# example.
export RUNID=$PBS_JOBNAME

# Load the required modules for serial kaiju.
# NOTE: pleiades and electra do not have the "module restore" facility found
# on cheyenne. The modules must be explicitly loaded each time they are
# needed.
# NOTE: This set of modules assumes your kaiju installation was built using
# this same list of modules. If you used different modules at build time (for
# example, if you used a GNU compiler), update this list to use the modules
# from your build-time environment.
module purge
module load pkgsrc/2021Q2
module load comp-intel/2020.4.304
module load hdf5/1.8.18_serial
echo "The following modules are loaded:"
module list

# Define the kaiju installation location.
# NOTE: You should set this variable to the path to your kaiju directory,
# which is the top-level directory created when you cloned the kaiju
# repository.
export KAIJU_INSTALL_DIR=$HOME/kaiju

# Set kaiju-related environment variables.
# This script sets KAIJUHOME and other environment variables.
source $KAIJU_INSTALL_DIR/scripts/setupEnvironment.sh

# Add the kaiju binary directory to the command path.
# NOTE: You should set this variable to the path to the bin/ subdirectory
# of your kaiju build directory.
export PATH=$KAIJUHOME/build_serial/bin:$PATH

# Set the OMP stack size to prevent a crash.
# If this setting is ignored, the model may cause gamera.x to crash with a
# segmentation fault and core dump. The value of "100M" was chosen
# ~arbitrarily; experimentation may allow a smaller value to be used.
export OMP_STACKSIZE=100M

echo "The active environment variables are:"
printenv

# Move to the job directory (by default, the job directory is $HOME.
# cd $PBS_O_WORKDIR
# echo "The current directory is `pwd`."

# Run the model. Direct output from the program is saved in a text file.
EXE=gamera.x
echo "Running $EXE on model $RUNID."
$EXE $RUNID.xml >& ${EXE}.${RUNID}.out

echo "Job $PBS_JOBID ended at `date` on `hostname`."
