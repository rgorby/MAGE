#!/bin/bash

#PBS -N helio_serial
#PBS -j oe
#PBS -l walltime=04:00:00
#PBS -m abe
#PBS -M eric.winter@jhuapl.edu
# In the lines below, uncomment the set appropriate for your system,
# and comment out the other set. The default is pleiades/electra.
# For the pleiades or electra HPC systems at NASA Ames HECC:
#PBS -q normal
#PBS -l select=1:ncpus=28:ompthreads=28:model=bro
# For the cheyenne HPC system at UCAR:
##PBS -A UJHB0015
##PBS -q regular
##PBS -l select=1:ncpus=36:ompthreads=36

# Explanation of #PBS lines:

# -N helio_serial -> The PBS job is named "helio_serial". This name
# will appear in the "qstat" output for this job. Set this string to
# whatever value is useful for your job.

# -j oe -> Combine job script std(o)ut and std(e)rr into stdout. This
# combined output will be saved in the file geo_serial.oJOB_NUM, where
# JOB_NUM is the PBS job number assigned when the job is
# submitted. Note that the output from the kaiju software itself is
# captured in a separate file (see below).

# -l walltime=04:00:00 -> Request 4 hours of compute time on the
# allocated compute node(s). The format is hh:mm:ss, where hh is
# hours, mm is minutes, and ss is seconds. Set this value high enough
# to ensure that your job runs to completion. Use a margin of perhaps
# x2-3 in your time estimate until you are more familiar with your
# execution time.

# -m abe -> Send an email to the address specified in -M when the job
# is (a)borted, (b)egins, and/or (e)nds.

# -M eric.winter@jhuapl.edu -> Set to your email address to receive
# notifications generated by the -m directive.

# For pleiades/electra:

# -q normal -> Submit the job to the PBS queue called "normal".

# The PBS resource request line is:
# -l select=1:ncpus=28:ompthreads=28:model=bro

# select=1 -> Request 1 compute node. The node will run 1 copy of
# gamera.x. Note that this is the *serial* version of gamera - it uses
# only OMP threads, and does not use MPI ranks.

# ncpus=28 -> Each compute node must have at least 28 cores. This
# requirement implies the use of the 2-socket, 14 cores/socket
# Broadwell nodes.

# ompthreads=28 -> Each compute node will run 28 OMP threads for the
# single copy of gamera.x on that node. Note that this will also cause
# the OMP_THREADS environment variable to be set to 28.

# model=bro -> Each compute node must contain Broadwell
# chips. Specifying "model" is a HECC-specific PBS requirement. The
# node(s) may be on pleiades OR electra (not both), using whichever
# system is available first.

# For cheyenne:

# -A UJHB0015 -> Run the job under this cheyenne user account. Replace
# this string with the ID of your user account.

# -q regular -> Submit the job to the PBS queue called "regular".

# The PBS resource request line is:
# -l select=1:ncpus=36:ompthreads=36 

# select=1 -> Request 1 compute node. This node will run 1 copy of
# gamera.x. Note that this is the *serial* version of gamera - it uses
# only OMP threads, and does not use MPI ranks.

# ncpus=36 -> Each compute node must have at least 36 cores. This
# requirement implies the use of the 2-socket, 18 cores/socket
# Broadwell nodes.

# ompthreads=36 -> Each compute node will run 36 OMP threads for the
# single copy of gamera.x on that node. Note that this will also cause
# the OMP_THREADS environment variable to be set to 36.

#------------------------------------------------------------------------------

# This PBS job script will run the serial version of the kaiju
# software on the helio_serial quickstart case.

# This job should run in roughly XX minutes of wall-clock time on
# pleiades.  On cheyenne, the job should run in roughly XXX.

# Example usage
# qsub -v helio_serial.pbs

echo "Job $PBS_JOBID started at `date` on `hostname`."

# Specify the ID string for the run. This can be set to any desired
# string. PBS_JOBNAME is used here as an example.
export RUNID=$PBS_JOBNAME

# NOTE: pleiades and electra do not have the "module restore" facility
# found on cheyenne. The modules must be explicitly loaded each time
# they are needed.
# NOTE: This set of modules assumes your kaiju installation was built
# using this same list of modules. If you used different modules at
# build time (for example, if you used a GNU compiler), update this
# list to use the modules from your build-time environment.

# Comment out the module lines for all systems except the one you are
# using.
module purge

# For pleiades/electra:
module load pkgsrc/2021Q2
module load comp-intel/2020.4.304
module load hdf5/1.8.18_serial

# For cheyenne:
# module load ncarenv/1.3
# module load intel/19.1.1
# module load ncarcompilers/0.5.0  # Must be after intel
# module load cmake/3.18.2
# module load hdf5/1.10.8

echo "The following modules are loaded:"
module list

# Define the kaiju installation location.
# NOTE: You MUSTd set this variable to the path to your kaiju
# directory, which is the top-level directory created when you cloned
# the kaiju repository.
export KAIJU_INSTALL_DIR=$HOME/kaiju

# Set kaiju-related environment variables.
# This script sets KAIJUHOME and other environment variables.
source $KAIJU_INSTALL_DIR/scripts/setupEnvironment.sh

# Add the kaiju binary directory to the command path.
# NOTE: You should set this variable to the path to the bin
# subdirectory of your kaiju build directory. The setting below
# assumes that the serial version of kaiju was built in the
# build_serial subdirectory of the kaiju home directory (which is
# typically the same as KAIJU_INSTALL_DIR).
export PATH=$KAIJUHOME/build_serial/bin:$PATH

# Set the OMP stack size to prevent a crash.
# If this setting is ignored, the model may cause gamera.x to crash
# with a segmentation fault and core dump. The value of "100M" was
# chosen ~arbitrarily; experimentation may allow a smaller value to be
# used.
export OMP_STACKSIZE=100M

echo "The active environment variables are:"
printenv

# Run the model. Direct output from the program is saved in a text
# file.
EXE=gamhelio.x
echo "Running $EXE on model $RUNID."
$EXE $RUNID.xml >& ${EXE}.${RUNID}.out

echo "Job $PBS_JOBID ended at `date` on `hostname`."
