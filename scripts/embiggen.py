#!/usr/bin/env python
#Takes one MPI-decomposed restart and spits out an upscaled MPI restart

import argparse
import kaipy.gamera.magsphereRescale as upscl
from argparse import RawTextHelpFormatter
import numpy as np
import h5py
import os
import kaipy.kaiH5 as kh5

if __name__ == "__main__":
	dIn = os.getcwd()

	#Input tiling
	iRi = 4
	iRj = 4
	iRk = 1
	#Output tiling
	oRi = 8
	oRj = 8
	oRk = 1

	inid  = "msphere"
	outid = "msphere"

	nRes = "0"
	grid = "lfmQ.h5"

	MainS = """Upscales and retiles a Gamera MPI resart

	
	(iRi,iRj,iRk) : Input MPI decomposition
	(oRi,oRj,oRk) : Output MPI decomposition
	inid/nres : Run ID string and restart number, i.e. input file = inid.MPISTUFF.Res.#nres.h5
	outid : Output Run ID
	grid : Filename of grid corners file (with ghosts) generated by genLFM/genGrid
	"""	
	parser = argparse.ArgumentParser(description=MainS, formatter_class=RawTextHelpFormatter)
	parser.add_argument('-i',metavar='inid',default=inid,help="Input Run ID string (default: %(default)s)")
	parser.add_argument('-n',type=int,metavar="nres",default=0,help="Restart number (default: %(default)s)")
	parser.add_argument('-iRi',type=int,metavar="iRi",default=iRi,help="Input i-Ranks (default: %(default)s)")
	parser.add_argument('-iRj',type=int,metavar="iRj",default=iRj,help="Input j-Ranks (default: %(default)s)")
	parser.add_argument('-iRk',type=int,metavar="iRk",default=iRk,help="Input k-Ranks (default: %(default)s)")
	parser.add_argument('-o',type=str,metavar="outid",default=outid,help="Output run ID (default: %(default)s)")
	parser.add_argument('-oRi',type=int,metavar="oRi",default=oRi,help="Input i-Ranks (default: %(default)s)")
	parser.add_argument('-oRj',type=int,metavar="oRj",default=oRj,help="Input j-Ranks (default: %(default)s)")
	parser.add_argument('-oRk',type=int,metavar="oRk",default=oRk,help="Input k-Ranks (default: %(default)s)")
	
	parser.add_argument('-grid',type=str,metavar="grid",default=grid,help="inGrid file to read from (default: %(default)s)")

	#Finalize parsing
	args = parser.parse_args()
	bStr = args.i
	nRes = args.n
	outid = args.o
	iRi = args.iRi
	iRj = args.iRj
	iRk = args.iRk

	oRi = args.oRi
	oRj = args.oRj
	oRk = args.oRk

	grid = args.grid
	
#Pull tiled restart, write to temp file
	#Stupidly writing temp restart to reuse old code
	fTmp = "tempRes.31337.h5"
	oH5 = h5py.File(fTmp,'w')

	G,M,G0 = upscl.PullRestartMPI(bStr,nRes,iRi,iRj,iRk,dIn=None,oH5=oH5)

	#Write main data
	print("Writing plasma and field data to temp file...")
	oH5.create_dataset("Gas",data=G)
	oH5.create_dataset("magFlux",data=M)
	gVals = ['X','Y','Z']

	fGrid = grid
	print("Reading grid from %s ..."%(fGrid))
	
	iH5 = h5py.File(fGrid,'r')
	for g in gVals:
		oH5.create_dataset(g,data=iH5[g])
	oH5.close()

#Upscale from temp file
	fTmp2X = "tempRes.31337.2x.h5"
	
	#Open input and output
	oH5 = h5py.File(fTmp2X,'w')
	iH5 = h5py.File(fTmp,'r')

	Ns,Nv,Nk,Nj,Ni = iH5['Gas'].shape
	G = np.zeros((Ns,Nv,Nk,Nj,Ni))
	M = np.zeros((3,Nk+1,Nj+1,Ni+1))
	G[:,:,:,:,:] = iH5['Gas'][:]
	M[  :,:,:,:] = iH5['magFlux'][:]
	X = iH5['X'][:]
	Y = iH5['Y'][:]
	Z = iH5['Z'][:]

	#Transfer attributes to output
	for k in iH5.attrs.keys():
		aStr = str(k)
		oH5.attrs.create(k,iH5.attrs[aStr])
	#Close input
	iH5.close()

	#Do upscaling
	Xr,Yr,Zr = upscl.upGrid(X,Y,Z)
	Gr = upscl.upGas(X,Y,Z,G,Xr.T,Yr.T,Zr.T)
	FluxR = upscl.upFlux(X,Y,Z,M,Xr,Yr,Zr)

	#Write out grid to restart
	oH5.create_dataset("X",data=Xr.T)
	oH5.create_dataset("Y",data=Yr.T)
	oH5.create_dataset("Z",data=Zr.T)

	#Write out gas/flux variables
	oH5.create_dataset("Gas",data=Gr)
	oH5.create_dataset("magFlux",data=FluxR)
	
	#Close output
	oH5.close()

#Split up upscaled file
	upscl.PushRestartMPI(outid,nRes,oRi,oRj,oRk,Xr.T,Yr.T,Zr.T,Gr,FluxR,fTmp2X)

#Delete temp files
	os.remove(fTmp)
	os.remove(fTmp2X)
