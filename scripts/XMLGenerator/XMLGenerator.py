import sys
import configparser
import subprocess
import os
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element

# Found on Stack Overflow.
# This indents everything in the elem node properly since apparently etree doesn't do that on it's own...
def indent(elem, level=0):
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

def createXML():
	# Get template file name
	template = sys.argv[1]

	# Get settings file name
	settings = sys.argv[2]

	# Get output file name
	output = sys.argv[3]

	# Run Initialization for Settings
	p1 = subprocess.Popen("python3 initialize.py " + settings, shell=True)
	p1.wait()

	# Read in default settings for this template
	tree = ET.parse(template)
	templateRoot = tree.getroot()

	# Make a Parser
	user = configparser.RawConfigParser()

	# Try to turn on case sensitivity
	user.optionxform = lambda option: option

	# Go to Settings folder generated by initialize.py
	os.chdir("Settings")

	inputDicts = {}

	# Iterate through each file there and make the root node the key for the resultant tree in a dictionary
	for filename in os.listdir():
		user = configparser.RawConfigParser()
		user.optionxform = lambda option: option
		user.read(filename)
		temp = filename.split('.')
		newFileName = temp[0]
		inputDicts[newFileName] = user

	#print(inputDicts)

	# Make bigger ETree by adding all roots as sub elements
	top = Element('Kaiju')

	for key in inputDicts.keys():
		temp = Element(key)
		ET.dump(temp)
		for section in inputDicts[key].sections():
			deeperTemp = Element(section)
			for option in inputDicts[key].options(section):
				deeperTemp.set(option, inputDicts[key].get(section, option))
			ET.SubElement(temp, deeperTemp.tag, deeperTemp.attrib)
		top.append(temp)

	ET.dump(top)

	# Go through the new settings and see if they match elements in the default
	for child in top:
		print(child.tag)
		# Try to find that child tag in the default tree
		if (templateRoot.find(child.tag) is not None):
			# If it exists, go one level down and iterate through those nodes
			firstLevel = templateRoot.find(child.tag)
			for lower in child:
				# Find the corresponding tag in the default
				nextLevel = firstLevel.find(lower.tag)
				print(nextLevel)
				print(lower)
				# Check if that tag exists. If not, just add it
				if  (nextLevel is not None):
					for item in lower.keys():
						nextLevel.set(item, lower.get(item))
				else:
					ET.SubElement(firstLevel, lower.tag, lower.attrib)
		else:
			# Else, just add that element to the root
			templateRoot.insert(child)
	#	for key in child.keys():
	#		# If tag appears, check sub-entries
	#		if (templateRoot.find(key) is not None):
	#			subelement = templateRoot.find(key)
	#			print("I found " + key + " in the default tree")
	#			# For each option in element, add that to the ETree element
	#			for item in key:
	#				subelement.set(item[0], item[1])
	#		# If tag does not appear, append new one to ETree
	#		else:
	#			print("I did not find " + key + " in the default tree")
	#			tempElement = ET.Element(key)
	#			# Go through the options and add them to a new element
	#			for item in child:
	#				tempElement.set(item[0],item[1])
	#		
	#			# Insert this new element at the end of the current section	
	#			templateRoot.insert(len(list(templateRoot)),tempElement)

	# Run root through the indentation function
	indent(templateRoot)

	os.chdir('..')

	# Write the XML file
	tree.write(output)

	# Cleanup Settigns folder
	subprocess.Popen("rm -rf Settings/", shell=True)

def createTemplate():
	# Get settings file name
	settings = sys.argv[1]

	# Get output file name
	output = sys.argv[2]

	# Run Initialization for Settings
	p1 = subprocess.Popen("python3 initialize.py " + settings, shell=True)
	p1.wait()

	# Make a Parser
	user = configparser.RawConfigParser()
	
	# Try to turn on case sensitivity
	user.optionxform = lambda option: option

	# Go to Settings folder generated by initialize.py
	os.chdir("Settings")

	inputDicts = {}

	# Iterate through each file there and make the root node the key for the resultant tree in a dictionary
	for filename in os.listdir():
		user = configparser.RawConfigParser()
		user.optionxform = lambda option: option
		user.read(filename)
		temp = filename.split('.')
		newFileName = temp[0]
		inputDicts[newFileName] = user

	# Make bigger ETree by adding all roots as sub elements
	top = Element('Kaiju')

	for key in inputDicts.keys():
		temp = Element(key)
		ET.dump(temp)
		for section in inputDicts[key].sections():
			deeperTemp = Element(section)
			for option in inputDicts[key].options(section):
				deeperTemp.set(option, inputDicts[key].get(section, option))
			ET.SubElement(temp, deeperTemp.tag, deeperTemp.attrib)
		top.append(temp)

	ET.dump(top)

	# Run root through the indentation function
	indent(top)

	os.chdir('..')

	# Create Etree with the root
	myTree = ET.ElementTree(top)

	# Write the XML file
	myTree.write(output)

	# Cleanup Settigns folder
	subprocess.Popen("rm -rf Settings/", shell=True)

# Check number of command line arguments
if (len(sys.argv) < 3):
	print("ERROR: Too few arguments")
	exit()

if (len(sys.argv) > 4):
	print("ERROR: Too many arguments")
	exit()

if (len(sys.argv) == 3):
	createTemplate()
	exit()

if (len(sys.argv) == 4):
	createXML()
	exit()
